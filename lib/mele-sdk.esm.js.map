{"version":3,"file":"mele-sdk.esm.js","sources":["../node_modules/tslib/tslib.es6.js","../src/query/distribution/index.ts","../src/query/slashing/index.ts","../src/query/staking/index.ts","../src/query/index.ts","../src/signer/default.ts","../src/transport/codec.ts","../src/transport/encoder.ts","../src/utils/index.ts","../src/signer/keyPair.ts","../src/signer/mnemonic.ts","../src/transactions/errors.ts","../src/transactions/events.ts","../src/transactions/broadcast.ts","../src/transport/jsonrpc2.ts","../src/transport/rpc.ts","../src/transport/index.ts","../src/transactions/index.ts","../src/transactions/bank/codec.ts","../src/transactions/bank/index.ts","../src/transactions/distribution/codec.ts","../src/transactions/distribution/index.ts","../src/transactions/slashing/codec.ts","../src/transactions/slashing/index.ts","../src/transactions/staking/codec.ts","../src/transactions/staking/index.ts","../src/indexer/api.ts","../src/indexer/index.ts","../src/mele.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import * as Types from '../../common'\nimport { ITransport } from '../../transport'\n\nnamespace Keys {\n    export const Query = {\n        QueryPath: 'distribution',\n\n        ParametersPath: 'params',\n        ValidatorOutstandingRewardsPath: 'validator_outstanding_rewards',\n        ValidatorCommissionPath: 'validator_commission',\n        ValidatorSlashesPath: 'validator_slashes',\n        DelegationRewardsPath: 'delegation_rewards',\n        DelegatorTotalRewardsPath: 'delegator_total_rewards',\n        DelegatorValidatorsPath: 'delegator_validators',\n        WithdrawAddrPath: 'withdraw_addr',\n        CommunityPoolPath: 'community_pool',\n    }\n}\n\n/**\n * Distribution Query\n * @namespace mele.query.distribution\n * @type {object}\n * @memberof mele\n */\n\nexport default class DistributionQuery {\n    private _transport: ITransport\n\n    constructor(transport: ITransport) {\n        this._transport = transport\n    }\n\n    /**\n     * mele.query.distribution.**getParameters**\n     *\n     * Fetch distribution module parameters.\n     *\n     * @memberof mele.query.distribution\n     * @inner\n     *\n     * @name DistributionParams\n     *\n     * @returns {DistributionParams} distributionParams - Distribution parameters.\n     */\n    getParameters(): Promise<Types.DistributionParams> {\n        const QueryPath = Keys.Query.QueryPath\n        const ParametersPath = Keys.Query.ParametersPath\n\n        return this._transport.query<Types.DistributionParams>([], '', QueryPath, ParametersPath)\n    }\n\n    /**\n     * mele.query.distribution.**getValidatorOutstandingRewards**\n     *\n     * Fetch validator outstanding rewards.\n     *\n     * @param {string} validator - Validator address\n     *\n     * @memberof mele.query.distribution\n     * @inner\n     *\n     * @name ValidatorOutstandingRewards\n     *\n     * @returns {[SDKCoin]} outstandingRewards - Outstanding rewards.\n     */\n    getValidatorOutstandingRewards(validator: string): Promise<Types.SDKCoin[]> {\n        const QueryPath = Keys.Query.QueryPath\n        const ValidatorOutstandingRewardsPath = Keys.Query.ValidatorOutstandingRewardsPath\n\n        return this._transport.query<Types.SDKCoin[]>(\n            [],\n            JSON.stringify({ validator_address: validator }),\n            QueryPath,\n            ValidatorOutstandingRewardsPath\n        )\n    }\n\n    /**\n     * mele.query.distribution.**getValidatorCommission**\n     *\n     * Fetch validator accumulated commission.\n     *\n     * @param {string} validator - Validator address\n     *\n     * @memberof mele.query.distribution\n     * @inner\n     *\n     * @name ValidatorCommission\n     *\n     * @returns {[SDKCoin]} commission - Accumulated commission.\n     */\n    getValidatorCommission(validator: string): Promise<Types.SDKCoin[]> {\n        const QueryPath = Keys.Query.QueryPath\n        const ValidatorCommissionPath = Keys.Query.ValidatorCommissionPath\n\n        return this._transport.query<Types.SDKCoin[]>(\n            [],\n            JSON.stringify({ validator_address: validator }),\n            QueryPath,\n            ValidatorCommissionPath\n        )\n    }\n\n    /**\n     * mele.query.distribution.**getValidatorSlashes**\n     *\n     * Fetch validator slashes at given height range.\n     *\n     * @param {string} validator - Validator address\n     * @param {string} startHeight - Start height\n     * @param {string} endHeight - End height\n     *\n     * @memberof mele.query.distribution\n     * @inner\n     *\n     * @name ValidatorSlashes\n     *\n     * @returns {[ValidatorSlashEvent]} slashEvents - Slash events.\n     */\n    getValidatorSlashes(\n        validator: string,\n        startHeight: string,\n        endHeight: string\n    ): Promise<Types.ValidatorSlashEvent[]> {\n        const QueryPath = Keys.Query.QueryPath\n        const ValidatorSlashesPath = Keys.Query.ValidatorSlashesPath\n\n        return this._transport.query<Types.ValidatorSlashEvent[]>(\n            [],\n            JSON.stringify({\n                validator_address: validator,\n                starting_height: startHeight,\n                ending_height: endHeight,\n            }),\n            QueryPath,\n            ValidatorSlashesPath\n        )\n    }\n\n    /**\n     * mele.query.distribution.**getDelegationRewards**\n     *\n     * Fetch delegator rewards.\n     *\n     * @param {string} delegator - Delegator address\n     * @param {string} validator - Validator address\n     *\n     * @memberof mele.query.distribution\n     * @inner\n     *\n     * @name DelegationRewards\n     *\n     * @returns {[SDKCoin]} rewards - Rewards.\n     */\n    getDelegationRewards(delegator: string, validator: string): Promise<Types.SDKCoin[]> {\n        const QueryPath = Keys.Query.QueryPath\n        const DelegationRewardsPath = Keys.Query.DelegationRewardsPath\n\n        return this._transport.query<Types.SDKCoin[]>(\n            [],\n            JSON.stringify({ delegator_address: delegator, validator_address: validator }),\n            QueryPath,\n            DelegationRewardsPath\n        )\n    }\n\n    /**\n     * mele.query.distribution.**getDelegatorTotalRewards**\n     *\n     * Fetch total delegator rewards.\n     *\n     * @param {string} delegator - Delegator address\n     *\n     * @memberof mele.query.distribution\n     * @inner\n     *\n     * @name DelegatorTotalRewards\n     *\n     * @returns {[DelegatorTotalRewardsRes]} rewards - Rewards.\n     */\n    getDelegatorTotalRewards(delegator: string): Promise<Types.DelegatorTotalRewardsRes[]> {\n        const QueryPath = Keys.Query.QueryPath\n        const DelegatorTotalRewardsPath = Keys.Query.DelegatorTotalRewardsPath\n\n        return this._transport.query<Types.DelegatorTotalRewardsRes[]>(\n            [],\n            JSON.stringify({ delegator_address: delegator }),\n            QueryPath,\n            DelegatorTotalRewardsPath\n        )\n    }\n\n    /**\n     * mele.query.distribution.**getDelegatorValidators**\n     *\n     * Fetch all validators that delegator had delegated to.\n     *\n     * @param {string} delegator - Delegator address\n     *\n     * @memberof mele.query.distribution\n     * @inner\n     *\n     * @name DelegatorValidators\n     *\n     * @returns {[string]} validators - Validator address array.\n     */\n    getDelegatorValidators(delegator: string): Promise<string[]> {\n        const QueryPath = Keys.Query.QueryPath\n        const DelegatorValidatorsPath = Keys.Query.DelegatorValidatorsPath\n\n        return this._transport.query<string[]>(\n            [],\n            JSON.stringify({ delegator_address: delegator }),\n            QueryPath,\n            DelegatorValidatorsPath\n        )\n    }\n\n    /**\n     * mele.query.distribution.**getWithdrawAddress**\n     *\n     * Fetch delegator's withdraw address.\n     *\n     * @param {string} delegator - Delegator address\n     *\n     * @memberof mele.query.distribution\n     * @inner\n     *\n     * @name WithdrawAddress\n     *\n     * @returns {string} withdrawAddress - Withdraw address.\n     */\n    getWithdrawAddress(delegator: string): Promise<string> {\n        const QueryPath = Keys.Query.QueryPath\n        const WithdrawAddrPath = Keys.Query.WithdrawAddrPath\n\n        return this._transport.query<string>(\n            [],\n            JSON.stringify({ delegator_address: delegator }),\n            QueryPath,\n            WithdrawAddrPath\n        )\n    }\n\n    /**\n     * mele.query.distribution.**getCommunityPool**\n     *\n     * Fetch delegator's withdraw address.\n     *\n     * @memberof mele.query.distribution\n     * @inner\n     *\n     * @name CommunityPool\n     *\n     * @returns {[SDKCoin]} communityPool - Community pool.\n     */\n    getCommunityPool(): Promise<Types.SDKCoin[]> {\n        const QueryPath = Keys.Query.QueryPath\n        const CommunityPoolPath = Keys.Query.CommunityPoolPath\n\n        return this._transport.query<Types.SDKCoin[]>([], '', QueryPath, CommunityPoolPath)\n    }\n}\n","import * as Types from '../../common'\nimport { ITransport } from '../../transport'\n\nnamespace Keys {\n    export const Query = {\n        QueryPath: 'slashing',\n\n        ParametersPath: 'parameters',\n        SigningInfoPath: 'signingInfo',\n        SigningInfosPath: 'signingInfos',\n    }\n}\n\n/**\n * Slashing Query\n * @namespace mele.query.slashing\n * @type {object}\n * @memberof mele\n */\n\nexport default class SlashingQuery {\n    private _transport: ITransport\n\n    constructor(transport: ITransport) {\n        this._transport = transport\n    }\n\n    /**\n     * mele.query.slashing.**getParameters**\n     *\n     * Fetch slashing module parameters.\n     *\n     * @memberof mele.query.slashing\n     * @inner\n     *\n     * @name SlashingParameters\n     *\n     * @returns {SlashingParams} slashingParams - Slashing parameters.\n     */\n    getParameters(): Promise<Types.SlashingParams> {\n        const QueryPath = Keys.Query.QueryPath\n        const ParametersPath = Keys.Query.ParametersPath\n\n        return this._transport.query<Types.SlashingParams>([], '', QueryPath, ParametersPath)\n    }\n\n    /**\n     * mele.query.slashing.**getSigningInfo**\n     *\n     * Fetch signing info for a single validator.\n     *\n     * @param {string} consAddress - Validator's consensus address\n     *\n     * @memberof mele.query.slashing\n     * @inner\n     *\n     * @name SigningInfo\n     *\n     * @returns {SigningInfo} signingInfo - Signing info.\n     */\n    getSigningInfo(consAddress: string): Promise<Types.SigningInfo> {\n        const QueryPath = Keys.Query.QueryPath\n        const SigningInfoPath = Keys.Query.SigningInfoPath\n\n        return this._transport.query<Types.SigningInfo>(\n            [],\n            JSON.stringify({\n                ConsAddress: consAddress,\n            }),\n            QueryPath,\n            SigningInfoPath\n        )\n    }\n\n    /**\n     * mele.query.slashing.**getSigningInfos**\n     *\n     * Fetch signing info for all validators.\n     *\n     * @memberof mele.query.slashing\n     * @inner\n     *\n     * @name SigningInfos\n     *\n     * @returns {[SigningInfo]} signingInfos - Signing info array.\n     */\n    getSigningInfos(): Promise<Types.SigningInfo[]> {\n        const QueryPath = Keys.Query.QueryPath\n        const SigningInfosPath = Keys.Query.SigningInfosPath\n\n        return this._transport.query<Types.SigningInfo[]>(\n            [],\n            JSON.stringify({\n                Page: '1',\n                Limit: '0',\n            }),\n            QueryPath,\n            SigningInfosPath\n        )\n    }\n}\n","import * as Types from '../../common'\nimport { ITransport } from '../../transport'\n\nnamespace Keys {\n    export const Query = {\n        QueryPath: 'mstaking',\n\n        ValidatorsPath: 'validators',\n        ValidatorPath: 'validator',\n        DelegatorDelegationsPath: 'delegatorDelegations',\n        DelegatorUnbondingDelegationsPath: 'delegatorUnbondingDelegations',\n        RedelegationsPath: 'redelegations',\n        ValidatorDelegationsPath: 'validatorDelegations',\n        ValidatorRedelegationsPath: 'validatorRedelegations',\n        ValidatorUnbondingDelegationsPath: 'validatorUnbondingDelegations',\n        DelegationPath: 'delegation',\n        UnbondingDelegationPath: 'unbondingDelegation',\n        DelegatorValidatorsPath: 'delegatorValidators',\n        DelegatorValidatorPath: 'delegatorValidator',\n        PoolPath: 'pool',\n        ParametersPath: 'parameters',\n        HistoricalInfoPath: 'historicalInfo',\n    }\n}\n\n/**\n * Staking Query\n * @namespace mele.query.staking\n * @type {object}\n * @memberof mele\n */\n\nexport default class StakingQuery {\n    private _transport: ITransport\n\n    constructor(transport: ITransport) {\n        this._transport = transport\n    }\n\n    /**\n     * mele.query.staking.**getValidators**\n     *\n     * Fetch all currently active validators.\n     *\n     * @memberof mele.query.staking\n     * @inner\n     *\n     * @name Validators\n     *\n     * @returns {[Validator]} validators - Validator array.\n     */\n    getValidators(): Promise<Types.Validator[]> {\n        const QueryPath = Keys.Query.QueryPath\n        const ValidatorsPath = Keys.Query.ValidatorsPath\n\n        return this._transport.query<Types.Validator[]>(\n            [],\n            JSON.stringify({\n                Status: 'Bonded',\n                Page: '1',\n                Limit: '1000',\n            }),\n            QueryPath,\n            ValidatorsPath\n        )\n    }\n\n    /**\n     * mele.query.staking.**getValidator**\n     *\n     * Fetch a single validator.\n     *\n     * @param {string} address - Validator address\n     *\n     * @memberof mele.query.staking\n     * @inner\n     *\n     * @name Validator\n     *\n     * @returns {Validator} validator - Validator.\n     */\n    getValidator(address: string): Promise<Types.Validator> {\n        const QueryPath = Keys.Query.QueryPath\n        const ValidatorPath = Keys.Query.ValidatorPath\n\n        return this._transport.query<Types.Validator>(\n            [],\n            JSON.stringify({ ValidatorAddr: address }),\n            QueryPath,\n            ValidatorPath\n        )\n    }\n\n    /**\n     * mele.query.staking.**getValidatorDelegations**\n     *\n     * Fetch all validator's delegations.\n     *\n     * @param {string} address - Validator address\n     *\n     * @memberof mele.query.staking\n     * @inner\n     *\n     * @name ValidatorDelegations\n     *\n     * @returns {[Delegation]} delegations - Delegations array.\n     */\n    getValidatorDelegations(address: string): Promise<Types.Delegation[]> {\n        const QueryPath = Keys.Query.QueryPath\n        const ValidatorDelegationsPath = Keys.Query.ValidatorDelegationsPath\n\n        return this._transport.query<Types.Delegation[]>(\n            [],\n            JSON.stringify({ ValidatorAddr: address }),\n            QueryPath,\n            ValidatorDelegationsPath\n        )\n    }\n\n    /**\n     * mele.query.staking.**getValidatorUnbondingDelegations**\n     *\n     * Fetch all validator's unbonding delegations.\n     *\n     * @param {string} address - Validator address\n     *\n     * @memberof mele.query.staking\n     * @inner\n     *\n     * @name ValidatorUnbondingDelegations\n     *\n     * @returns {[Delegation]} delegations - Delegations array.\n     */\n    getValidatorUnbondingDelegations(address: string): Promise<Types.Delegation[]> {\n        const QueryPath = Keys.Query.QueryPath\n        const ValidatorUnbondingDelegationsPath = Keys.Query.ValidatorUnbondingDelegationsPath\n\n        return this._transport.query<Types.Delegation[]>(\n            [],\n            JSON.stringify({ ValidatorAddr: address }),\n            QueryPath,\n            ValidatorUnbondingDelegationsPath\n        )\n    }\n\n    /**\n     * mele.query.staking.**getDelegation**\n     *\n     * Fetch a single delegation.\n     *\n     * @param {string} delegatorAddress - Delegator address\n     * @param {string} validatorAddress - Validator address\n     *\n     * @memberof mele.query.staking\n     * @inner\n     *\n     * @name Delegation\n     *\n     * @returns {DelegationRes} delegation - Delegation.\n     */\n    getDelegation(\n        delegatorAddress: string,\n        validatorAddress: string\n    ): Promise<Types.DelegationRes> {\n        const QueryPath = Keys.Query.QueryPath\n        const DelegationPath = Keys.Query.DelegationPath\n\n        return this._transport.query<Types.DelegationRes>(\n            [],\n            JSON.stringify({ DelegatorAddr: delegatorAddress, ValidatorAddr: validatorAddress }),\n            QueryPath,\n            DelegationPath\n        )\n    }\n\n    /**\n     * mele.query.staking.**getUnbondingDelegation**\n     *\n     * Fetch a single unbonding delegation.\n     *\n     * @param {string} delegatorAddress - Delegator address\n     * @param {string} validatorAddress - Validator address\n     *\n     * @memberof mele.query.staking\n     * @inner\n     *\n     * @name UnbondingDelegation\n     *\n     * @returns {UnbondingDelegation} unbondingDelegation - Unbonding delegation.\n     */\n    getUnbondingDelegation(\n        delegatorAddress: string,\n        validatorAddress: string\n    ): Promise<Types.UnbondingDelegation> {\n        const QueryPath = Keys.Query.QueryPath\n        const UnbondingDelegationPath = Keys.Query.UnbondingDelegationPath\n\n        return this._transport.query<Types.UnbondingDelegation>(\n            [],\n            JSON.stringify({ DelegatorAddr: delegatorAddress, ValidatorAddr: validatorAddress }),\n            QueryPath,\n            UnbondingDelegationPath\n        )\n    }\n\n    /**\n     * mele.query.staking.**getDelegatorDelegations**\n     *\n     * Fetch all delegator's delegations.\n     *\n     * @param {string} delegatorAddress - Delegator address\n     *\n     * @memberof mele.query.staking\n     * @inner\n     *\n     * @name DelegatorDelegations\n     *\n     * @returns {[Delegation]} delegations - Delegation array.\n     */\n    getDelegatorDelegations(delegatorAddress: string): Promise<Types.Delegation[]> {\n        const QueryPath = Keys.Query.QueryPath\n        const DelegatorDelegationsPath = Keys.Query.DelegatorDelegationsPath\n\n        return this._transport.query<Types.Delegation[]>(\n            [],\n            JSON.stringify({ DelegatorAddr: delegatorAddress }),\n            QueryPath,\n            DelegatorDelegationsPath\n        )\n    }\n\n    /**\n     * mele.query.staking.**getDelegatorUnbondingDelegations**\n     *\n     * Fetch all delegator's unbonding delegations.\n     *\n     * @param {string} delegatorAddress - Delegator address\n     *\n     * @memberof mele.query.staking\n     * @inner\n     *\n     * @name DelegatorUnbondingDelegations\n     *\n     * @returns {[UnbondingDelegation]} unbondingDelegations - Unbonding delegations array.\n     */\n    getDelegatorUnbondingDelegations(\n        delegatorAddress: string\n    ): Promise<Types.UnbondingDelegation[]> {\n        const QueryPath = Keys.Query.QueryPath\n        const DelegatorUnbondingDelegationsPath = Keys.Query.DelegatorUnbondingDelegationsPath\n\n        return this._transport.query<Types.UnbondingDelegation[]>(\n            [],\n            JSON.stringify({ DelegatorAddr: delegatorAddress }),\n            QueryPath,\n            DelegatorUnbondingDelegationsPath\n        )\n    }\n\n    /**\n     * mele.query.staking.**getRedelegations**\n     *\n     * Fetch all redelegations by the delegator from source validator to the destination validator.\n     *\n     * @param {string} delegatorAddress - Delegator address\n     * @param {string} srcValidatorAddress - Source validator address\n     * @param {string} dstValidatorAddress - Destination validator address\n     *\n     * @memberof mele.query.staking\n     * @inner\n     *\n     * @name Redelegations\n     *\n     * @returns {[Redelegation]} redelegations - Redelegations array.\n     */\n    getRedelegations(\n        delegatorAddress: string,\n        srcValidatorAddress: string,\n        dstValidatorAddress: string\n    ): Promise<Types.Redelegation[]> {\n        const QueryPath = Keys.Query.QueryPath\n        const RedelegationsPath = Keys.Query.RedelegationsPath\n\n        return this._transport.query<Types.Redelegation[]>(\n            [],\n            JSON.stringify({\n                DelegatorAddr: delegatorAddress,\n                SrcValidatorAddr: srcValidatorAddress,\n                DstValidatorAddr: dstValidatorAddress,\n            }),\n            QueryPath,\n            RedelegationsPath\n        )\n    }\n\n    /**\n     * mele.query.staking.**getDelegatorValidators**\n     *\n     * Fetch all validators that have delegations by the delegator.\n     *\n     * @param {string} delegatorAddress - Delegator address\n     *\n     * @memberof mele.query.staking\n     * @inner\n     *\n     * @name DelegatorValidators\n     *\n     * @returns {[Validator]} validators - Validators array.\n     */\n    getDelegatorValidators(delegatorAddress: string): Promise<Types.Validator[]> {\n        const QueryPath = Keys.Query.QueryPath\n        const DelegatorValidatorsPath = Keys.Query.DelegatorValidatorsPath\n\n        return this._transport.query<Types.Validator[]>(\n            [],\n            JSON.stringify({ DelegatorAddr: delegatorAddress }),\n            QueryPath,\n            DelegatorValidatorsPath\n        )\n    }\n\n    /**\n     * mele.query.staking.**getDelegatorValidator**\n     *\n     * Fetch a single validators that has delegations by the delegator.\n     *\n     * @param {string} delegatorAddress - Delegator address\n     * @param {string} validatorAddress - Validator address\n     *\n     * @memberof mele.query.staking\n     * @inner\n     *\n     * @name DelegatorValidator\n     *\n     * @returns {Validator} validator - Validator.\n     */\n    getDelegatorValidator(\n        delegatorAddress: string,\n        validatorAddress: string\n    ): Promise<Types.Validator> {\n        const QueryPath = Keys.Query.QueryPath\n        const DelegatorValidatorPath = Keys.Query.DelegatorValidatorPath\n\n        return this._transport.query<Types.Validator>(\n            [],\n            JSON.stringify({ DelegatorAddr: delegatorAddress, ValidatorAddr: validatorAddress }),\n            QueryPath,\n            DelegatorValidatorPath\n        )\n    }\n\n    /**\n     * mele.query.staking.**getHistoricalInfo**\n     *\n     * Fetch historical info at given height.\n     *\n     * @param {number} height - Block height\n     *\n     * @memberof mele.query.staking\n     * @inner\n     *\n     * @name HistoricalInfo\n     *\n     * @returns {HistoricalInfo} historicalInfo - Historical info.\n     */\n    getHistoricalInfo(height: number): Promise<Types.HistoricalInfo> {\n        const QueryPath = Keys.Query.QueryPath\n        const HistoricalInfoPath = Keys.Query.HistoricalInfoPath\n\n        return this._transport.query<Types.HistoricalInfo>(\n            [],\n            JSON.stringify({ Height: String(height) }),\n            QueryPath,\n            HistoricalInfoPath\n        )\n    }\n\n    /**\n     * mele.query.staking.**getParameters**\n     *\n     * Fetch staking module parameters.\n     *\n     * @memberof mele.query.staking\n     * @inner\n     *\n     * @name StakingParams\n     *\n     * @returns {StakingParams} stakingParams - Staking parameters.\n     */\n    getParameters(): Promise<Types.StakingParams> {\n        const QueryPath = Keys.Query.QueryPath\n        const ParametersPath = Keys.Query.ParametersPath\n\n        return this._transport.query<Types.StakingParams>([], '', QueryPath, ParametersPath)\n    }\n\n    /**\n     * mele.query.staking.**getPool**\n     *\n     * Fetch staking module pool.\n     *\n     * @memberof mele.query.staking\n     * @inner\n     *\n     * @name StakingPool\n     *\n     * @returns {StakingPool} stakingPool - Staking pool.\n     */\n    getPool(): Promise<Types.StakingPool> {\n        const QueryPath = Keys.Query.QueryPath\n        const PoolPath = Keys.Query.PoolPath\n\n        return this._transport.query<Types.StakingPool>([], '', QueryPath, PoolPath)\n    }\n}\n","import * as Types from '../common'\nimport { ITransport } from '../transport'\nimport { ResultBlock, ResultStatus, ResultTx } from '../transport/rpc'\n\nimport DistributionQuery from './distribution'\nimport SlashingQuery from './slashing'\nimport StakingQuery from './staking'\n\nnamespace Keys {\n    export const Query = {\n        AuthModuleQueryPath: 'acc',\n        AccountPath: 'account',\n    }\n}\n\n/**\n * Query\n * @namespace mele.query\n * @type {object}\n * @memberof mele\n */\n\nexport default class Query {\n    private _transport: ITransport\n    private _staking: StakingQuery\n    private _slashing: SlashingQuery\n    private _distribution: DistributionQuery\n\n    constructor(transport: ITransport) {\n        this._transport = transport\n\n        this._staking = new StakingQuery(this._transport)\n        this._slashing = new SlashingQuery(this._transport)\n        this._distribution = new DistributionQuery(this._transport)\n    }\n\n    get staking(): StakingQuery {\n        return this._staking\n    }\n\n    get slashing(): SlashingQuery {\n        return this._slashing\n    }\n\n    get distribution(): DistributionQuery {\n        return this._distribution\n    }\n\n    /**\n     * mele.query.**getBlock**\n     *\n     * Fetch block data at given height.\n     *\n     * @param {number} height - Block height\n     *\n     * @memberof mele.query\n     * @inner\n     *\n     * @name Block\n     *\n     * @returns {ResultBlock} block - Block data.\n     */\n    getBlock(height: number): Promise<ResultBlock> {\n        return this._transport.block(height)\n    }\n\n    /**\n     * mele.query.**getStatus**\n     *\n     * Fetch current network status.\n     *\n     * @memberof mele.query\n     * @inner\n     *\n     * @name Status\n     *\n     * @returns {ResultStatus} status - Current status.\n     */\n    getStatus(): Promise<ResultStatus> {\n        return this._transport.status()\n    }\n\n    /**\n     * mele.query.**getTx**\n     *\n     * Fetch transaction by hash.\n     *\n     * @param {string} hash - Transaction hash\n     *\n     * @memberof mele.query\n     * @inner\n     *\n     * @name Transaction\n     *\n     * @returns {ResultTx} transaction - Transaction data.\n     */\n    getTx(hash: string): Promise<ResultTx> {\n        return this._transport.tx(hash)\n    }\n\n    /**\n     * mele.query.**getAccountInfo**\n     *\n     * Fetch account information by account address.\n     *\n     * @param {string} address - Account address\n     *\n     * @memberof mele.query\n     * @inner\n     *\n     * @name AccountInfo\n     *\n     * @returns {Promise<Account>} account - Account data.\n     */\n    getAccountInfo(address: string): Promise<Types.Account> {\n        const AuthModuleQueryPath = Keys.Query.AuthModuleQueryPath\n        const AccountPath = Keys.Query.AccountPath\n\n        return this._transport.query<Types.Account>(\n            [],\n            JSON.stringify({ Address: address }),\n            AuthModuleQueryPath,\n            AccountPath\n        )\n    }\n\n    /**\n     * mele.query.**getAccSignInfo**\n     *\n     * Fetch account signing information by account address.\n     *\n     * @param {string} address - Account address\n     *\n     * @memberof mele.query\n     * @inner\n     *\n     * @name AccountSigningInfo\n     *\n     * @returns {Promise<AccSignInfo>} account - Account signing info.\n     */\n    async getAccSignInfo(address: string): Promise<Types.AccSignInfo> {\n        let accountInfo = await this.getAccountInfo(address)\n\n        return <Types.AccSignInfo>{\n            address: accountInfo.value.address,\n            accountNumber: accountInfo.value.account_number,\n            sequence: accountInfo.value.sequence,\n        }\n    }\n}\n","import { Signer } from './index'\n\nexport class DefaultSigner implements Signer {\n    getAddress(): string {\n        throw new Error('Signer not initialized.')\n    }\n\n    getPrivateKey(): string {\n        throw new Error('Signer not initialized.')\n    }\n\n    getPublicKey(): string {\n        throw new Error('Signer not initialized.')\n    }\n\n    signTransaction(\n        msgs: any[],\n        chainId: string,\n        fee: number,\n        sequence: number,\n        accountNumber: number\n    ): string {\n        throw new Error('Signer not initialized.')\n    }\n\n    signMessage(msg: string): string {\n        throw new Error('Signer not initialized.')\n    }\n}\n","import { Codec, TypeFactory, Types } from 'js-amino'\n\nexport const StdTx = TypeFactory.create('StdTx', [\n    {\n        name: 'msg',\n        type: Types.ArrayInterface,\n    },\n    {\n        name: 'fee',\n        type: Types.Struct,\n    },\n    {\n        name: 'signatures',\n        type: Types.ArrayStruct,\n    },\n    {\n        name: 'memo',\n        type: Types.String,\n    },\n])\n\nexport const Coin = TypeFactory.create('coin', [\n    {\n        name: 'denom',\n        type: Types.String,\n    },\n    {\n        name: 'amount',\n        type: Types.String,\n    },\n])\n\nexport const Fee = TypeFactory.create('fee', [\n    {\n        name: 'amount',\n        type: Types.ArrayStruct,\n    },\n    {\n        name: 'gas',\n        type: Types.Int64,\n    },\n])\n\nexport const PubKeySecp256k1 = TypeFactory.create(\n    'PubKeySecp256k1',\n    [\n        {\n            name: 's',\n            type: Types.ByteSlice,\n        },\n    ],\n    Types.ByteSlice\n)\n\nexport const Signature = TypeFactory.create('signature', [\n    {\n        name: 'pub_key',\n        type: Types.Interface,\n    },\n    {\n        name: 'signature',\n        type: Types.ByteSlice,\n    },\n])\n\nconst codec = new Codec()\n\ncodec.registerConcrete(new StdTx(), 'cosmos-sdk/StdTx', {})\ncodec.registerConcrete(new PubKeySecp256k1(), 'tendermint/PubKeySecp256k1', {})\n\nexport const marshalBinary = tx => {\n    return Buffer.from(codec.marshalBinary(tx)).toString('base64')\n}\n\nexport const marshalJson = tx => {\n    return codec.marshalJson(tx)\n}\n\nexport const registerConcrete = (type, obj) => {\n    codec.registerConcrete(new obj(), type, {})\n}\n","import bech32 from 'bech32'\nimport shajs from 'sha.js'\n\nimport { Coin, Fee, PubKeySecp256k1, Signature, StdTx, marshalBinary, marshalJson } from './codec'\n\nexport function encodeAddr(addr: Buffer): string {\n    return bech32.encode(_PREFIX.PrefixAddress, bech32.toWords(addr))\n}\n\nexport function decodeAddr(addr: string): Buffer {\n    let decode = bech32.decode(addr)\n\n    if (decode.prefix !== _PREFIX.PrefixAddress) {\n        throw new Error(`invalid prefix: ${decode.prefix}\\n`)\n    }\n\n    return Buffer.from(bech32.fromWords(decode.words))\n}\n\n// TODO: Find a better solution\nexport const encodeMsg = (msg: any) => {\n    Object.keys(msg).forEach(k => {\n        if (typeof msg[k] === 'string' && msg[k].startsWith(_PREFIX.PrefixAddress)) {\n            msg[k] = decodeAddr(msg[k]).toJSON().data\n        } else if (typeof msg[k] == 'object' && !(msg[k] instanceof Array)) {\n            msg[k] = encodeMsg(msg[k])\n        } else if (typeof msg[k] == 'object' && msg[k] instanceof Array) {\n            msg[k] = msg[k].map(m => {\n                return encodeMsg(m)\n            })\n        }\n    })\n\n    return msg\n}\n\nexport function encodeSignMsg(\n    stdMsg: any[],\n    chainId: string,\n    seq: number,\n    accountNumber: number,\n    maxFeeInCoin: number\n): any {\n    stdMsg = stdMsg.map(msg => JSON.parse(marshalJson(msg)))\n\n    const stdSignMsg = {\n        account_number: String(accountNumber),\n        chain_id: chainId,\n        fee: getFee(maxFeeInCoin, stdMsg.length),\n        memo: 'sdk',\n        msgs: stdMsg,\n        sequence: String(seq),\n    }\n\n    const jsonStr = JSON.stringify(number2StringInObject(sortObject(stdSignMsg)))\n\n    const signMsgHash = shajs('sha256').update(jsonStr).digest()\n\n    return signMsgHash\n}\n\nexport function encodeTx(\n    msgs: any[],\n    rawPubKey: string[],\n    rawSigDER: string[],\n    maxFeeInCoin: number\n): string {\n    let sigs = new Array<any>()\n\n    for (let _i = 0; _i < rawPubKey.length; _i++) {\n        const sig = new Signature(\n            new PubKeySecp256k1(Buffer.from(rawPubKey[_i], 'hex').toJSON().data),\n            Buffer.from(rawSigDER[_i], 'hex').toJSON().data\n        )\n\n        sigs.push(sig)\n    }\n\n    const fee = getFee(maxFeeInCoin, msgs.length)\n\n    let stdTx = new StdTx(msgs, fee, sigs, 'sdk')\n\n    return marshalBinary(stdTx)\n}\n\nexport const getFee = (maxFeeInCoin: number, msgCount: number) => {\n    return new Fee([new Coin('umele', String(maxFeeInCoin))], Math.ceil(msgCount / 10) * 200000)\n}\n\nfunction sortObject(object) {\n    if (typeof object == 'string') {\n        return object\n    }\n    let sortedObj = {},\n        keys = Object.keys(object)\n\n    keys.sort(function (key1, key2) {\n        ; (key1 = key1.toLowerCase()), (key2 = key2.toLowerCase())\n        if (key1 < key2) return -1\n        if (key1 > key2) return 1\n        return 0\n    })\n\n    for (let index in keys) {\n        let key = keys[index]\n\n        if (typeof object[key] == 'object' && !(object[key] instanceof Array)) {\n            sortedObj[key] = sortObject(object[key])\n        } else if (typeof object[key] == 'object' && object[key] instanceof Array) {\n            sortedObj[key] = []\n\n            object[key].forEach(element => {\n                sortedObj[key].push(sortObject(element))\n            })\n        } else {\n            sortedObj[key] = object[key]\n        }\n    }\n\n    return sortedObj\n}\n\nfunction number2StringInObject(object): any {\n    let resultObj = {},\n        keys = Object.keys(object)\n\n    if (typeof object == 'string') {\n        return object\n    }\n\n    for (let index in keys) {\n        let key = keys[index]\n\n        if (typeof object[key] == 'object' && !(object[key] instanceof Array)) {\n            resultObj[key] = number2StringInObject(object[key])\n        } else if (typeof object[key] == 'object' && object[key] instanceof Array) {\n            resultObj[key] = []\n\n            object[key].forEach(element => {\n                resultObj[key].push(number2StringInObject(element))\n            })\n        } else {\n            if (typeof object[key] == 'number') {\n                resultObj[key] = String(object[key])\n            } else {\n                resultObj[key] = object[key]\n            }\n        }\n    }\n\n    return resultObj\n}\n\nconst _PREFIX = {\n    PrefixAddress: 'mele',\n}\n","import { ec as EC } from 'elliptic'\n\nimport * as bip32 from 'bip32'\nimport * as bip39 from 'bip39'\n\nimport bech32 from 'bech32'\nimport ripemd160 from 'ripemd160'\nimport shajs from 'sha.js'\n\nimport { encodeAddr } from '../transport/encoder'\n\nconst ec = new EC('secp256k1')\n\nexport interface KeyPair {\n    privateKey: string\n    publicKey: string\n}\n\nexport function generateMnemonic(): string {\n    return bip39.generateMnemonic(256)\n}\n\nexport function generateKeyPair(): KeyPair {\n    const keyPair = ec.genKeyPair()\n\n    const pubKey = keyPair.getPublic(true, 'hex')\n    const privKey = keyPair.getPrivate('hex')\n\n    return <KeyPair>{\n        privateKey: privKey,\n        publicKey: pubKey,\n    }\n}\n\nexport function deriveMasterKey(mnemonic: string): bip32.BIP32Interface {\n    bip39.validateMnemonic(mnemonic)\n\n    const seed = bip39.mnemonicToSeedSync(mnemonic)\n\n    return bip32.fromSeed(seed)\n}\n\nexport function deriveMasterKeyFromSeed(seed: Buffer): bip32.BIP32Interface {\n    return bip32.fromSeed(seed)\n}\n\nexport function deriveKeyPair(masterKey: bip32.BIP32Interface, hdPath: string): KeyPair {\n    const hdWallet = masterKey.derivePath(hdPath)\n\n    const privKey = hdWallet.privateKey\n\n    if (!privKey) {\n        throw new Error('Failed to derive key pair!')\n    }\n\n    const pubKey = ec.keyFromPrivate(privKey, 'hex')\n\n    return <KeyPair>{\n        privateKey: privKey.toString('hex'),\n        publicKey: pubKey.getPublic(true, 'hex'),\n    }\n}\n\nexport function deriveKeyPairFromAccountAndIndex(\n    masterKey: bip32.BIP32Interface,\n    account: number = 0,\n    index: number = 0\n): KeyPair {\n    const hdPath = `m/44'/118'/${account}'/0/${index}`\n\n    return deriveKeyPair(masterKey, hdPath)\n}\n\nexport function getAddressFromPublicKey(pubKey: string): string {\n    if (!validatePublicKey(pubKey)) {\n        throw new Error('Invalid public key.')\n    }\n\n    const hashResult = shajs('sha256').update(Buffer.from(pubKey, 'hex')).digest() as string\n\n    const addr = new ripemd160().update(hashResult).digest()\n\n    return encodeAddr(addr)\n}\n\nexport function getPublicKeyFromPrivateKey(privKey: string): string {\n    const key = ec.keyFromPrivate(privKey, 'hex')\n\n    return key.getPublic(true, 'hex')\n}\n\nexport function validatePublicKey(pubKey: string): boolean {\n    try {\n        const keyPair = ec.keyFromPublic(pubKey, 'hex')\n\n        return keyPair.validate().result\n    } catch (e) {\n        return false\n    }\n}\n","import { ec as EC } from 'elliptic'\nimport shajs from 'sha.js'\n\nimport { encodeMsg, encodeSignMsg, encodeTx } from '../transport/encoder'\nimport * as Utils from '../utils'\nimport { Signer } from './index'\n\nconst ec = new EC('secp256k1')\n\nexport class KeyPairSigner implements Signer {\n    private _privateKey: string\n    private _publicKey: string\n    private _address: string\n\n    constructor(privateKey: string) {\n        this._privateKey = privateKey\n\n        this._publicKey = Utils.getPublicKeyFromPrivateKey(privateKey)\n        this._address = Utils.getAddressFromPublicKey(this._publicKey)\n    }\n\n    getAddress(): string {\n        return this._address\n    }\n\n    getPrivateKey(): string {\n        return this._privateKey\n    }\n\n    getPublicKey(): string {\n        return this._publicKey\n    }\n\n    signTransaction(\n        msgs: any[],\n        chainId: string,\n        fee: number,\n        sequence: number,\n        accountNumber: number\n    ): string {\n        let key = ec.keyFromPrivate(this._privateKey, 'hex')\n\n        const signMsgHash = encodeSignMsg(msgs, chainId, sequence, accountNumber, fee)\n\n        const sig = key.sign(signMsgHash, { canonical: true })\n\n        const sigDERHex = Buffer.from(\n            sig.r.toArray('be', 32).concat(sig.s.toArray('be', 32))\n        ).toString('hex')\n\n        const tx = encodeTx(\n            msgs.map(msg => encodeMsg(msg)),\n            new Array<string>(key.getPublic(true, 'hex')),\n            new Array<string>(sigDERHex),\n            fee\n        )\n\n        return tx\n    }\n\n    signMessage(msg: string): string {\n        const key = ec.keyFromPrivate(this._privateKey, 'hex')\n\n        const signByte = shajs('sha256').update(msg).digest()\n\n        const sig = key.sign(signByte, { canonical: true })\n\n        return Buffer.from(JSON.stringify(sig), 'utf-8').toString('hex')\n    }\n}\n","import { ec as EC } from 'elliptic'\nimport shajs from 'sha.js'\n\nimport { encodeMsg, encodeSignMsg, encodeTx } from '../transport/encoder'\nimport * as Utils from '../utils'\nimport { Signer } from './index'\n\nconst ec = new EC('secp256k1')\n\nexport class MnemonicSigner implements Signer {\n    private _privateKey: string\n    private _publicKey: string\n    private _address: string\n\n    constructor(mnemonic: string, path = `m/44'/118'/0'/0/0`) {\n        const masterKey = Utils.deriveMasterKey(mnemonic)\n        const keyPair = Utils.deriveKeyPair(masterKey, path)\n\n        this._privateKey = keyPair.privateKey\n\n        this._publicKey = keyPair.publicKey\n        this._address = Utils.getAddressFromPublicKey(this._publicKey)\n    }\n\n    getAddress(): string {\n        return this._address\n    }\n\n    getPrivateKey(): string {\n        return this._privateKey\n    }\n\n    getPublicKey(): string {\n        return this._publicKey\n    }\n\n    signTransaction(\n        msgs: any[],\n        chainId: string,\n        fee: number,\n        sequence: number,\n        accountNumber: number\n    ): string {\n        let key = ec.keyFromPrivate(this._privateKey, 'hex')\n\n        const signMsgHash = encodeSignMsg(msgs, chainId, sequence, accountNumber, fee)\n\n        const sig = key.sign(signMsgHash, { canonical: true })\n\n        const sigDERHex = Buffer.from(\n            sig.r.toArray('be', 32).concat(sig.s.toArray('be', 32))\n        ).toString('hex')\n\n        const tx = encodeTx(\n            msgs.map(msg => encodeMsg(msg)),\n            new Array<string>(key.getPublic(true, 'hex')),\n            new Array<string>(sigDERHex),\n            fee\n        )\n\n        return tx\n    }\n\n    signMessage(msg: string): string {\n        const key = ec.keyFromPrivate(this._privateKey, 'hex')\n\n        const signByte = shajs('sha256').update(msg).digest()\n\n        const sig = key.sign(signByte, { canonical: true })\n\n        return Buffer.from(JSON.stringify(sig), 'utf-8').toString('hex')\n    }\n}\n","export enum BroadCastErrorEnum {\n    CheckTx,\n    DeliverTx,\n}\n\nexport class BroadcastError extends Error {\n    readonly code: number\n    readonly type: BroadCastErrorEnum\n\n    constructor(type: BroadCastErrorEnum, log: string, code: number) {\n        super(log)\n        Object.setPrototypeOf(this, BroadcastError.prototype)\n        this.type = type\n        this.code = code\n    }\n}\n","import { EventEmitter } from 'events'\n\nimport { ResultBroadcastTx, ResultTx } from '../transport/rpc'\n\nimport { BroadcastError } from './errors'\n\nexport declare interface TransactionEvents {\n    on(event: 'hash', listener: (hash: string) => void): this\n    on(event: 'receipt', listener: (receipt: ResultBroadcastTx) => void): this\n    on(event: 'confirmation', listener: (tx: ResultTx) => void): this\n    on(event: 'error', listener: (error: BroadcastError) => void): this\n\n    on(event: string, listener: Function): this\n}\n\nexport class TransactionEvents extends EventEmitter {\n    emitHash(hash: string) {\n        this.emit('hash', hash)\n    }\n\n    emitReceipt(receipt: ResultBroadcastTx) {\n        this.emit('receipt', receipt)\n    }\n\n    emitConfirmation(tx: ResultTx) {\n        this.emit('confirmation', tx)\n    }\n\n    emitError(error: BroadcastError) {\n        this.emit('error', error)\n    }\n}\n","import Query from '../query'\nimport { Signer } from '../signer'\nimport { ITransport } from '../transport'\nimport { ResultBroadcastTx } from '../transport/rpc'\nimport { BroadCastErrorEnum, BroadcastError } from './errors'\nimport { TransactionEvents } from './events'\n\nimport * as Types from '../common'\n\nimport promiseRetry from 'promise-retry'\n\ninterface Options {\n    txConfirmInterval: number\n    txConfirmTries: number\n    chainId: string\n    maxFeeInCoin: number\n}\n\nexport default class Broadcast {\n    private _transport: ITransport\n    private _query: Query\n    private _options: Options\n    private _signer: Signer\n\n    constructor(transport: ITransport, query: Query, signer: Signer, opts: Options) {\n        this._transport = transport\n        this._query = query\n        this._signer = signer\n\n        this._options = opts\n    }\n\n    get signer(): Signer {\n        return this._signer\n    }\n\n    get query(): Query {\n        return this._query\n    }\n\n    safeBroadcast(signers: string[], makeTxFunc: Function): TransactionEvents {\n        const txEvents = new TransactionEvents()\n\n        let accSignInfos: Promise<Types.AccSignInfo>[] = []\n\n        for (let i = 0; i < signers.length; i++) {\n            let seq = this._query.getAccSignInfo(signers[i])\n\n            accSignInfos.push(seq)\n        }\n\n        Promise.all(accSignInfos).then((signInfos: Types.AccSignInfo[]): void => {\n            let tx = makeTxFunc(signInfos)\n\n            this._transport\n                .broadcastRawMsgBytesSync(tx)\n                .then((result: ResultBroadcastTx): void => {\n                    txEvents.emitHash(result.hash)\n\n                    txEvents.emitReceipt(result)\n\n                    promiseRetry(\n                        (retry, num) => {\n                            if (num === 1) {\n                                return retry()\n                            }\n\n                            return this._transport.tx(result.hash).catch(retry)\n                        },\n                        {\n                            retries: this._options.txConfirmTries,\n                            factor: 1,\n                            minTimeout: this._options.txConfirmInterval,\n                            maxTimeout: this._options.txConfirmInterval,\n                        }\n                    ).then(\n                        value => {\n                            txEvents.emitConfirmation(value)\n                        },\n                        err => {}\n                    )\n                })\n                .catch((err: any): void => {\n                    if (err.data && err.data.indexOf('Tx already exists in cache') >= 0) {\n                        txEvents.emitError(\n                            new BroadcastError(BroadCastErrorEnum.CheckTx, err.data, err.code || 0)\n                        )\n                    } else if (err.code && err.message) {\n                        txEvents.emitError(\n                            new BroadcastError(BroadCastErrorEnum.CheckTx, err.message, err.code)\n                        )\n                    } else {\n                        txEvents.emitError(\n                            new BroadcastError(\n                                BroadCastErrorEnum.CheckTx,\n                                'Unknown error ocurred while broadcasting transaction.',\n                                -1\n                            )\n                        )\n                    }\n                })\n        })\n\n        return txEvents\n    }\n\n    sendTransaction(msgs: any[]): TransactionEvents {\n        return this.safeBroadcast([this._signer.getAddress()], accSignInfos => {\n            return this._signer.signTransaction(\n                msgs,\n                this._options.chainId,\n                this._options.maxFeeInCoin,\n                accSignInfos[0].sequence,\n                accSignInfos[0].accountNumber\n            )\n        })\n    }\n}\n","/** A String specifying the version of the JSON-RPC protocol. MUST be exactly \"2.0\". */\nexport type JsonRpcVersion = '2.0'\n\n/** Method names that begin with the word rpc followed by a period character\n * (U+002E or ASCII 46) are reserved for rpc-internal methods and extensions\n *  and MUST NOT be used for anything else. */\nexport type JsonRpcReservedMethod = string\n\n/** An identifier established by the Client that MUST contain a String, Number,\n *  or NULL value if included. If it is not included it is assumed to be a\n *  notification. The value SHOULD normally not be Null and Numbers SHOULD\n *  NOT contain fractional parts [2] */\nexport type JsonRpcId = number | string | void\n\n/**\n * method:\n * A String containing the name of the method to be invoked.\n * Method names that begin with the word rpc followed by a period\n * character (U+002E or ASCII 46) are reserved for rpc-internal methods\n * and extensions and MUST NOT be used for anything else.\n *\n * params:\n * A Structured value that holds the parameter values to be used\n * during the invocation of the method. This member MAY be omitted.\n */\nexport interface JsonRpcNotification<T> {\n    jsonrpc: JsonRpcVersion\n    method: string\n    params?: T\n}\n\nexport interface JsonRpcRequest<T> extends JsonRpcNotification<T> {\n    id: JsonRpcId\n}\n\nexport interface JsonRpcResponseBase {\n    jsonrpc: JsonRpcVersion\n    id: JsonRpcId\n}\n\nexport interface JsonRpcSuccess<T = object> extends JsonRpcResponseBase {\n    result: T\n}\nexport function isJsonRpcSuccess(response: object): response is JsonRpcSuccess {\n    return 'result' in response\n}\n\nexport interface JsonRpcFailure<T> extends JsonRpcResponseBase {\n    error: JsonRpcError<T>\n}\n\nexport interface JsonRpcError<T = object> {\n    /** Must be an integer */\n    code: number\n    message: string\n    data?: T\n}\n\nexport type JsonRpcResponse<T> = JsonRpcSuccess<T> | JsonRpcFailure<T>\n\n//\n// PRE-DEFINED ERROR CODES\n//\n//\n/** An error occurred on the server while parsing the JSON text. */\nexport const PARSE_ERROR = -32700\n/** The JSON sent is not a valid Request object. */\nexport const INVALID_REQUEST = -32600\n/** The method does not exist / is not available. */\nexport const METHOD_NOT_FOUND = -32601\n/** Invalid method parameter(s). */\nexport const INVALID_PARAMS = -32602\n/** Internal JSON-RPC error. */\nexport const INTERNAL_ERROR = -32603\n","import fetch from 'cross-fetch'\nimport { JsonRpcResponse, isJsonRpcSuccess } from './jsonrpc2'\n\nexport interface ResultTx {\n    hash: string\n    height: string\n    tx: string\n    tx_result: TxDetail\n}\n\nexport interface TxDetail {\n    code: number\n    data: any\n    log: string\n    info: string\n    gasWanted: string\n    gasUsed: string\n    events: TxEvent[]\n    codespace: string\n}\n\nexport interface TxEvent {\n    type: string\n    attributes: TxEventAttribute[]\n}\n\nexport interface TxEventAttribute {\n    key: string\n    value: string\n}\n\nexport interface ResultBlock {\n    block: Block\n    block_meta: BlockMeta\n}\n\nexport interface Block {\n    data: Data\n}\n\nexport interface BlockMeta {}\n\nexport interface Data {\n    txs: string[]\n}\n\nconst DefaultABCIQueryOptions = {\n    height: '0',\n    trusted: false,\n}\n\nexport interface ResultStatus {\n    node_info: NodeInfo\n    sync_info: SyncInfo\n}\n\nexport interface NodeInfo {\n    channels: string\n    id: string\n    listen_addr: string\n    moniker: string\n    network: string\n    version: string\n}\n\nexport interface SyncInfo {\n    catching_up: boolean\n    latest_app_hash: string\n    latest_block_hash: string\n    latest_block_height: string\n    latest_block_time: string\n}\n\nexport interface ResultABCIQuery {\n    response: ResponseQuery\n}\n\nexport interface ResponseQuery {\n    code: number\n    log: string\n    info: string\n    index: number\n    key: string\n    value: any\n    proof: string\n    height: number\n}\n\nexport interface ResultBroadcastTx {\n    code: number\n    data: any\n    log: string\n    hash: any\n}\n\nexport class Rpc {\n    private _nodeUrl: string\n\n    constructor(nodeUrl: string) {\n        this._nodeUrl = nodeUrl\n    }\n\n    block(height: number): Promise<ResultBlock> {\n        return fetch(this._nodeUrl, {\n            headers: { 'Content-Type': 'text/json' },\n            body: JSON.stringify({\n                jsonrpc: '2.0',\n                id: 'jsonrpc-client',\n                method: 'block',\n                params: {\n                    height: String(height),\n                },\n            }),\n            method: 'POST',\n            mode: 'cors',\n        })\n            .then(response => response.json())\n            .then((data: JsonRpcResponse<ResultBlock>) => {\n                if (isJsonRpcSuccess(data)) {\n                    return data.result as ResultBlock\n                } else {\n                    throw data.error\n                }\n            })\n    }\n\n    status(): Promise<ResultStatus> {\n        return fetch(this._nodeUrl, {\n            headers: { 'Content-Type': 'text/json' },\n            body: JSON.stringify({\n                jsonrpc: '2.0',\n                id: 'jsonrpc-client',\n                method: 'status',\n            }),\n            method: 'POST',\n            mode: 'cors',\n        })\n            .then(response => response.json())\n            .then((data: JsonRpcResponse<ResultStatus>) => {\n                if (isJsonRpcSuccess(data)) {\n                    return data.result as ResultStatus\n                } else {\n                    throw data.error\n                }\n            })\n    }\n\n    abciQuery(path: string, key: string, opts = DefaultABCIQueryOptions): Promise<ResultABCIQuery> {\n        return fetch(this._nodeUrl, {\n            headers: { 'Content-Type': 'text/json' },\n            body: JSON.stringify({\n                jsonrpc: '2.0',\n                id: 'jsonrpc-client',\n                method: 'abci_query',\n                params: {\n                    ...opts,\n                    path,\n                    data: key,\n                },\n            }),\n            method: 'POST',\n            mode: 'cors',\n        })\n            .then(response => response.json())\n            .then((data: JsonRpcResponse<ResultABCIQuery>) => {\n                if ('result' in data) {\n                    return data.result as ResultABCIQuery\n                } else {\n                    throw data.error\n                }\n            })\n    }\n\n    broadcastTxSync(tx: string): Promise<ResultBroadcastTx> {\n        return fetch(this._nodeUrl, {\n            headers: { 'Content-Type': 'text/json' },\n            body: JSON.stringify({\n                jsonrpc: '2.0',\n                id: 'jsonrpc-client',\n                method: 'broadcast_tx_sync',\n                params: {\n                    tx: tx,\n                },\n            }),\n            method: 'POST',\n            mode: 'cors',\n        })\n            .then(response => response.json())\n            .then((data: JsonRpcResponse<ResultBroadcastTx>) => {\n                if (isJsonRpcSuccess(data)) {\n                    return data.result as ResultBroadcastTx\n                } else {\n                    throw data.error\n                }\n            })\n    }\n\n    tx(hash: string): Promise<ResultTx> {\n        return fetch(this._nodeUrl, {\n            headers: { 'Content-Type': 'text/json' },\n            body: JSON.stringify({\n                jsonrpc: '2.0',\n                id: 'jsonrpc-client',\n                method: 'tx',\n                params: {\n                    hash: hash,\n                },\n            }),\n            method: 'POST',\n            mode: 'cors',\n        })\n            .then(response => response.json())\n            .then((data: JsonRpcResponse<ResultTx>) => {\n                if (isJsonRpcSuccess(data)) {\n                    let res: ResultTx = {\n                        hash: data.result.hash,\n                        tx_result: data.result.tx_result,\n                        height: data.result.height,\n                        tx: data.result.tx,\n                    }\n                    return res\n                } else {\n                    throw data.error\n                }\n            })\n    }\n}\n","import { ec as EC } from 'elliptic'\nimport { Signer } from '../signer'\nimport { encodeMsg, encodeSignMsg, encodeTx } from './encoder'\n\nimport { ResultBlock, ResultBroadcastTx, ResultStatus, ResultTx, Rpc } from './rpc'\n\nimport { BroadCastErrorEnum, BroadcastError } from '../transactions/errors'\n\nexport interface ITransport {\n    block(height: number): Promise<ResultBlock>\n    status(): Promise<ResultStatus>\n    tx(hash: string): Promise<ResultTx>\n    query<T = any>(key: string[], data: string, storeName: string, subStoreName: string): Promise<T>\n    broadcastRawMsgBytesSync(tx: string): Promise<ResultBroadcastTx>\n}\n\nexport interface ITransportOptions {\n    nodeUrl: string\n}\n\nexport class Transport implements ITransport {\n    private _rpc: Rpc\n\n    constructor(opt: ITransportOptions) {\n        this._rpc = new Rpc(opt.nodeUrl)\n    }\n\n    block(height: number): Promise<ResultBlock> {\n        return this._rpc.block(height).then(result => {\n            return result as ResultBlock\n        })\n    }\n\n    status(): Promise<ResultStatus> {\n        return this._rpc.status().then(result => {\n            return result as ResultStatus\n        })\n    }\n\n    tx(hash: string): Promise<ResultTx> {\n        return this._rpc.tx(String(Buffer.from(hash, 'hex').toString('base64'))).then(result => {\n            return result as ResultTx\n        })\n    }\n\n    query<T>(keys: string[], data: string, storeName: string, subStoreName: string): Promise<T> {\n        let path = `/custom/${storeName}/${subStoreName}`\n\n        keys.forEach(key => {\n            path += '/' + key\n        })\n\n        return this._rpc\n            .abciQuery(path, Buffer.from(data, 'utf-8').toString('hex'))\n            .then(result => {\n                if (!result.response || !result.response.value) {\n                    throw new QueryError(result.response.log, result.response.code)\n                }\n\n                const jsonStr = Buffer.from(result.response.value, 'base64').toString('utf-8')\n\n                return JSON.parse(jsonStr) as T\n            })\n    }\n\n    broadcastRawMsgBytesSync(tx: string): Promise<ResultBroadcastTx> {\n        return this._rpc.broadcastTxSync(tx).then(result => {\n            if (result.code !== 0) {\n                throw new BroadcastError(BroadCastErrorEnum.CheckTx, result.log, result.code)\n            }\n            return result\n        })\n    }\n}\n\nexport class QueryError extends Error {\n    readonly code: number\n\n    constructor(log: string, code: number) {\n        super(log)\n        Object.setPrototypeOf(this, QueryError.prototype)\n        this.code = code\n    }\n}\n","import Broadcast from './broadcast'\nimport { TransactionEvents } from './events'\n\nexport class Transaction {\n    private _msgs: any[]\n    private _sendTransaction: Function\n\n    constructor(msgs: any[], sendTransaction: Function) {\n        this._msgs = msgs\n\n        this._sendTransaction = sendTransaction\n    }\n\n    sendTransaction(): TransactionEvents {\n        return this._sendTransaction(this._msgs)\n    }\n}\n\nexport class TransactionApi {\n    private _broadcast: Broadcast\n\n    constructor(broadcast: Broadcast) {\n        this._broadcast = broadcast\n    }\n\n    get broadcast(): Broadcast {\n        return this._broadcast\n    }\n}\n","import { TypeFactory, Types } from 'js-amino'\nimport { registerConcrete } from '../../transport/codec'\n\nexport const Codec = {\n    'cosmos-sdk/MsgSend': TypeFactory.create('MsgSend', [\n        {\n            name: 'from_address',\n            type: Types.String,\n        },\n        {\n            name: 'to_address',\n            type: Types.String,\n        },\n        {\n            name: 'amount',\n            type: Types.ArrayStruct,\n        },\n    ]),\n}\n\nObject.keys(Codec).forEach(codec => registerConcrete(codec, Codec[codec]))\n","import { Coin } from '../../transport/codec'\nimport { Transaction, TransactionApi } from '../index'\nimport { Codec } from './codec'\n\nimport * as Types from '../../common'\n\nconst _types = {\n    TransferMsgType: 'cosmos-sdk/MsgSend',\n}\n\nexport const Msgs = {\n    makeTransferMsg(fromAddress: string, toAddress: string, amount: Types.SDKCoin[]): any[] {\n        const msg = new Codec[_types.TransferMsgType](\n            fromAddress,\n            toAddress,\n            amount.map(am => new Coin(am.denom, am.amount))\n        )\n\n        return [msg]\n    },\n}\n\n/**\n * Bank\n * @namespace mele.bank\n * @type {object}\n * @memberof mele\n */\n\nexport default class Bank extends TransactionApi {\n    /**\n     * mele.bank.**transfer**\n     *\n     * Transfer an arbitrary amount of tokens to the receiving account.\n     *\n     * @param {string} toAddress - Receiving account address\n     * @param {[SDKCoin]} amount - Amount of tokens to send\n     *\n     * @memberof mele.bank\n     * @inner\n     *\n     * @name Transfer\n     *\n     * @returns {Transaction} transaction - Transaction class instance.\n     */\n    transfer(toAddress: string, amount: Types.SDKCoin[]): Transaction {\n        const msgs = Msgs.makeTransferMsg(this.broadcast.signer.getAddress(), toAddress, amount)\n\n        return new Transaction(msgs, msgs => this.broadcast.sendTransaction(msgs))\n    }\n}\n","import { TypeFactory, Types } from 'js-amino'\nimport { registerConcrete } from '../../transport/codec'\n\nexport const Codec = {\n    'cosmos-sdk/MsgWithdrawDelegationReward': TypeFactory.create('MsgWithdrawDelegationReward', [\n        {\n            name: 'delegator_address',\n            type: Types.String,\n        },\n        {\n            name: 'validator_address',\n            type: Types.String,\n        },\n    ]),\n    'cosmos-sdk/MsgWithdrawValidatorCommission': TypeFactory.create(\n        'MsgWithdrawValidatorCommission',\n        [\n            {\n                name: 'validator_address',\n                type: Types.String,\n            },\n        ]\n    ),\n    'cosmos-sdk/MsgModifyWithdrawAddress': TypeFactory.create('MsgModifyWithdrawAddress', [\n        {\n            name: 'delegator_address',\n            type: Types.String,\n        },\n        {\n            name: 'withdraw_address',\n            type: Types.String,\n        },\n    ]),\n}\n\nObject.keys(Codec).forEach(codec => registerConcrete(codec, Codec[codec]))\n","import { Transaction, TransactionApi } from '../index'\nimport { Codec } from './codec'\n\nimport * as Types from '../../common'\n\nconst _types = {\n    WithdrawDelegationRewardMsgType: 'cosmos-sdk/MsgWithdrawDelegationReward',\n    WithdrawValidatorCommissionMsgType: 'cosmos-sdk/MsgWithdrawValidatorCommission',\n    ModifyWithdrawAddressMsgType: 'cosmos-sdk/MsgModifyWithdrawAddress',\n}\n\nexport const Msgs = {\n    makeWithdrawDelegationRewardMsg(delegator: string, validator: string): any[] {\n        const msg = new Codec[_types.WithdrawDelegationRewardMsgType](delegator, validator)\n\n        return [msg]\n    },\n    makeWithdrawValidatorCommissionMsg(validator: string): any[] {\n        const msg = new Codec[_types.WithdrawValidatorCommissionMsgType](validator)\n\n        return [msg]\n    },\n    makeModifyWithdrawAddressMsg(delegator: string, withdrawAddress: string): any[] {\n        const msg = new Codec[_types.ModifyWithdrawAddressMsgType](delegator, withdrawAddress)\n\n        return [msg]\n    },\n}\n\n/**\n * Distribution\n * @namespace mele.distribution\n * @type {object}\n * @memberof mele\n */\n\nexport default class Distribution extends TransactionApi {\n    /**\n     * mele.distribution.**withdrawDelegationReward**\n     *\n     * Withdraw delegator reward from given validator.\n     *\n     * @param {string} validator - Validator address\n     *\n     * @memberof mele.distribution\n     * @inner\n     *\n     * @name WithdrawDelegationReward\n     *\n     * @returns {Transaction} transaction - Transaction class instance.\n     */\n    withdrawDelegationReward(validator: string): Transaction {\n        const msgs = Msgs.makeWithdrawDelegationRewardMsg(\n            this.broadcast.signer.getAddress(),\n            validator\n        )\n\n        return new Transaction(msgs, msgs => this.broadcast.sendTransaction(msgs))\n    }\n\n    /**\n     * mele.distribution.**withdrawValidatorCommission**\n     *\n     * Withdraw validator commission.\n     *\n     * @param {string} validator - Validator address\n     *\n     * @memberof mele.distribution\n     * @inner\n     *\n     * @name WithdrawValidatorCommission\n     *\n     * @returns {Transaction} transaction - Transaction class instance.\n     */\n    withdrawValidatorCommission(validator: string): Transaction {\n        const msgs = Msgs.makeWithdrawValidatorCommissionMsg(validator)\n\n        return new Transaction(msgs, msgs => this.broadcast.sendTransaction(msgs))\n    }\n\n    /**\n     * mele.distribution.**modifyWithdrawAddress**\n     *\n     * Modify delegator's withdraw address.\n     *\n     * @param {string} withdrawAddress - Withdraw address\n     *\n     * @memberof mele.distribution\n     * @inner\n     *\n     * @name ModifyWithdrawAddress\n     *\n     * @returns {Transaction} transaction - Transaction class instance.\n     */\n    modifyWithdrawAddress(withdrawAddress: string): Transaction {\n        const msgs = Msgs.makeModifyWithdrawAddressMsg(\n            this.broadcast.signer.getAddress(),\n            withdrawAddress\n        )\n\n        return new Transaction(msgs, msgs => this.broadcast.sendTransaction(msgs))\n    }\n}\n","import { TypeFactory, Types } from 'js-amino'\nimport { registerConcrete } from '../../transport/codec'\n\nexport const Codec = {\n    'cosmos-sdk/MsgUnjail': TypeFactory.create('MsgUnjail', [\n        {\n            name: 'address',\n            type: Types.String,\n        },\n    ]),\n}\n\nObject.keys(Codec).forEach(codec => registerConcrete(codec, Codec[codec]))\n","import { Coin } from '../../transport/codec'\nimport { Transaction, TransactionApi } from '../index'\nimport { Codec } from './codec'\n\nimport * as Types from '../../common'\n\nconst _types = {\n    UnjailMsgType: 'cosmos-sdk/MsgUnjail',\n}\n\nexport const Msgs = {\n    makeUnjailMsg(address: string): any[] {\n        const msg = new Codec[_types.UnjailMsgType](address)\n\n        return [msg]\n    },\n}\n\n/**\n * Slashing\n * @namespace mele.slashing\n * @type {object}\n * @memberof mele\n */\n\nexport default class Slashing extends TransactionApi {\n    /**\n     * mele.slashing.**unjail**\n     *\n     * Unjail a jailed validator.\n     *\n     * @param {string} address - Validator address\n     *\n     * @memberof mele.slashing\n     * @inner\n     *\n     * @name Unjail\n     *\n     * @returns {Transaction} transaction - Transaction class instance.\n     */\n    unjail(address: string): Transaction {\n        const msgs = Msgs.makeUnjailMsg(address)\n\n        return new Transaction(msgs, msgs => this.broadcast.sendTransaction(msgs))\n    }\n}\n","import { TypeFactory, Types } from 'js-amino'\nimport { registerConcrete } from '../../transport/codec'\n\nexport const Codec = {\n    'cosmos-sdk/MsgCreateValidator': TypeFactory.create('MsgCreateValidator', [\n        {\n            name: 'description',\n            type: Types.Struct,\n        },\n        {\n            name: 'commission',\n            type: Types.Struct,\n        },\n        {\n            name: 'min_self_delegation',\n            type: Types.String,\n        },\n        {\n            name: 'delegator_address',\n            type: Types.String,\n        },\n        {\n            name: 'validator_address',\n            type: Types.String,\n        },\n        {\n            name: 'pubkey',\n            type: Types.String,\n        },\n        {\n            name: 'value',\n            type: Types.Struct,\n        },\n    ]),\n    Commission: TypeFactory.create('Commission', [\n        {\n            name: 'rate',\n            type: Types.String,\n        },\n        {\n            name: 'max_rate',\n            type: Types.String,\n        },\n        {\n            name: 'max_change_rate',\n            type: Types.String,\n        },\n    ]),\n    Description: TypeFactory.create('Description', [\n        {\n            name: 'moniker',\n            type: Types.String,\n        },\n        {\n            name: 'identity',\n            type: Types.String,\n        },\n        {\n            name: 'website',\n            type: Types.String,\n        },\n        {\n            name: 'security_contact',\n            type: Types.String,\n        },\n        {\n            name: 'details',\n            type: Types.String,\n        },\n    ]),\n    'cosmos-sdk/MsgEditValidator': TypeFactory.create('MsgEditValidator', [\n        {\n            name: 'description',\n            type: Types.Struct,\n        },\n        {\n            name: 'address',\n            type: Types.String,\n        },\n        {\n            name: 'commission_rate',\n            type: Types.String,\n        },\n        {\n            name: 'min_self_delegation',\n            type: Types.String,\n        },\n    ]),\n    'cosmos-sdk/MsgDelegate': TypeFactory.create('MsgDelegate', [\n        {\n            name: 'delegator_address',\n            type: Types.String,\n        },\n        {\n            name: 'validator_address',\n            type: Types.String,\n        },\n        {\n            name: 'amount',\n            type: Types.Struct,\n        },\n    ]),\n    'cosmos-sdk/MsgUndelegate': TypeFactory.create('MsgUndelegate', [\n        {\n            name: 'delegator_address',\n            type: Types.String,\n        },\n        {\n            name: 'validator_address',\n            type: Types.String,\n        },\n        {\n            name: 'amount',\n            type: Types.Struct,\n        },\n    ]),\n    'cosmos-sdk/MsgBeginRedelegate': TypeFactory.create('MsgBeginRedelegate', [\n        {\n            name: 'delegator_address',\n            type: Types.String,\n        },\n        {\n            name: 'validator_src_address',\n            type: Types.String,\n        },\n        {\n            name: 'validator_dst_address',\n            type: Types.String,\n        },\n        {\n            name: 'amount',\n            type: Types.Struct,\n        },\n    ]),\n}\n\nObject.keys(Codec).forEach(codec => registerConcrete(codec, Codec[codec]))\n","import { Coin } from '../../transport/codec'\nimport { Transaction, TransactionApi } from '../index'\nimport { Codec } from './codec'\n\nimport * as Types from '../../common'\n\nconst _types = {\n    CreateValidatorMsgType: 'cosmos-sdk/MsgCreateValidator',\n    EditValidatorMsgType: 'cosmos-sdk/MsgEditValidator',\n    DelegateMsgType: 'cosmos-sdk/MsgDelegate',\n    UndelegateMsgType: 'cosmos-sdk/MsgUndelegate',\n    BeginRedelegateMsgType: 'cosmos-sdk/MsgBeginRedelegate',\n\n    Description: 'Description',\n    Commission: 'Commission',\n}\n\nexport const Msgs = {\n    makeDelegateMsg(delegator: string, validator: string, amount: Types.SDKCoin): any[] {\n        const msg = new Codec[_types.DelegateMsgType](\n            delegator,\n            validator,\n            new Coin(amount.denom, amount.amount)\n        )\n\n        return [msg]\n    },\n    makeUndelegateMsg(delegator: string, validator: string, amount: Types.SDKCoin): any[] {\n        const msg = new Codec[_types.UndelegateMsgType](\n            delegator,\n            validator,\n            new Coin(amount.denom, amount.amount)\n        )\n\n        return [msg]\n    },\n    makeBeginRedelegateMsg(\n        delegator: string,\n        srcValidator: string,\n        dstValidator: string,\n        amount: Types.SDKCoin\n    ): any[] {\n        const msg = new Codec[_types.BeginRedelegateMsgType](\n            delegator,\n            srcValidator,\n            dstValidator,\n            new Coin(amount.denom, amount.amount)\n        )\n\n        return [msg]\n    },\n    makeCreateValidatorMsg(\n        description: Types.Description,\n        commission: Types.Commission,\n        minSelfDelegation: string,\n        delegator: string,\n        validator: string,\n        pubkey: string,\n        value: Types.SDKCoin\n    ): any[] {\n        let desc = new Codec[_types.Description](\n            description.moniker,\n            description.identity,\n            description.website,\n            description.securityContact,\n            description.details\n        )\n\n        let comm = new Codec[_types.Commission](\n            commission.rate,\n            commission.maxRate,\n            commission.maxChangeRate\n        )\n\n        const msg = new Codec[_types.CreateValidatorMsgType](\n            desc,\n            comm,\n            minSelfDelegation,\n            delegator,\n            validator,\n            pubkey,\n            new Coin(value.denom, value.amount)\n        )\n\n        return [msg]\n    },\n    makeEditValidatorMsg(\n        description: Types.Description,\n        address: string,\n        commissionRate: string,\n        minSelfDelegation: string\n    ): any[] {\n        let desc = new Codec[_types.Description](\n            description.moniker,\n            description.identity,\n            description.website,\n            description.securityContact,\n            description.details\n        )\n\n        const msg = new Codec[_types.EditValidatorMsgType](\n            desc,\n            address,\n            commissionRate,\n            minSelfDelegation\n        )\n\n        return [msg]\n    },\n}\n\n/**\n * Staking\n * @namespace mele.staking\n * @type {object}\n * @memberof mele\n */\n\nexport default class Staking extends TransactionApi {\n    /**\n     * mele.staking.**createValidator**\n     *\n     * Create a new validator.\n     *\n     * @param {Description} description - Validator description\n     * @param {Commission} commission - Validator commission information\n     * @param {string} minSelfDelegation - Minimum self delegation\n     * @param {string} validator - Validator address\n     * @param {string} pubkey - Validator public key\n     * @param {SDKCoin} value - Amount of tokens to delegate\n     *\n     * @memberof mele.staking\n     * @inner\n     *\n     * @name CreateValidator\n     *\n     * @returns {Transaction} transaction - Transaction class instance.\n     */\n    createValidator(\n        description: Types.Description,\n        commission: Types.Commission,\n        minSelfDelegation: string,\n        delegator: string,\n        validator: string,\n        pubkey: string,\n        value: Types.SDKCoin\n    ): Transaction {\n        const msgs = Msgs.makeCreateValidatorMsg(\n            description,\n            commission,\n            minSelfDelegation,\n            this.broadcast.signer.getAddress(),\n            validator,\n            pubkey,\n            value\n        )\n\n        return new Transaction(msgs, msgs => this.broadcast.sendTransaction(msgs))\n    }\n\n    /**\n     * mele.staking.**editValidator**\n     *\n     * Edit validator description, commission rate and minimum self delegation.\n     *\n     * @param {Description} description - Validator description\n     * @param {string} address - Validator address\n     * @param {string} commissionRate - New commission rate\n     * @param {string} minSelfDelegation - New minimum self delegation\n     *\n     * @memberof mele.staking\n     * @inner\n     *\n     * @name EditValidator\n     *\n     * @returns {Transaction} transaction - Transaction class instance.\n     */\n    editValidator(\n        description: Types.Description,\n        address: string,\n        commissionRate: string,\n        minSelfDelegation: string\n    ): Transaction {\n        const msgs = Msgs.makeEditValidatorMsg(\n            description,\n            address,\n            commissionRate,\n            minSelfDelegation\n        )\n\n        return new Transaction(msgs, msgs => this.broadcast.sendTransaction(msgs))\n    }\n\n    /**\n     * mele.staking.**delegate**\n     *\n     * Delegate an arbitrary amount of tokens to the receiving validator.\n     *\n     * @param {string} validator - Receiving validator address\n     * @param {SDKCoin} amount - Amount of tokens to delegate\n     *\n     * @memberof mele.staking\n     * @inner\n     *\n     * @name Delegate\n     *\n     * @returns {Transaction} transaction - Transaction class instance.\n     */\n    delegate(validator: string, amount: Types.SDKCoin): Transaction {\n        const msgs = Msgs.makeDelegateMsg(this.broadcast.signer.getAddress(), validator, amount)\n\n        return new Transaction(msgs, msgs => this.broadcast.sendTransaction(msgs))\n    }\n\n    /**\n     * mele.staking.**undelegate**\n     *\n     * Undelegate an arbitrary amount of tokens from the validator.\n     *\n     * @param {string} validator - Validator address\n     * @param {SDKCoin} amount - Amount of tokens to undelegate\n     *\n     * @memberof mele.staking\n     * @inner\n     *\n     * @name Undelegate\n     *\n     * @returns {Transaction} transaction - Transaction class instance.\n     */\n    undelegate(validator: string, amount: Types.SDKCoin): Transaction {\n        const msgs = Msgs.makeUndelegateMsg(this.broadcast.signer.getAddress(), validator, amount)\n\n        return new Transaction(msgs, msgs => this.broadcast.sendTransaction(msgs))\n    }\n\n    /**\n     * mele.staking.**beginRedelegate**\n     *\n     * Redelegate an arbitrary amount of tokens to the one validator to another validator.\n     *\n     * @param {string} srcValidator - Source validator address\n     * @param {string} dstValidator - Destination validator address\n     * @param {SDKCoin} amount - Amount of tokens to redelegate\n     *\n     * @memberof mele.staking\n     * @inner\n     *\n     * @name BeginRedelegate\n     *\n     * @returns {Transaction} transaction - Transaction class instance.\n     */\n    beginRedelegate(\n        srcValidator: string,\n        dstValidator: string,\n        amount: Types.SDKCoin\n    ): Transaction {\n        const msgs = Msgs.makeBeginRedelegateMsg(\n            this.broadcast.signer.getAddress(),\n            srcValidator,\n            dstValidator,\n            amount\n        )\n\n        return new Transaction(msgs, msgs => this.broadcast.sendTransaction(msgs))\n    }\n}\n","import fetch from 'cross-fetch'\nimport queryString from 'query-string'\n\ntype Headers = any[] & { [key: string]: any }\ntype supportedMethods = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\nexport default class IndexerApi {\n    static get(\n        endpoint: string,\n        action: string,\n        query?: any,\n        data?: any,\n        headers?: Headers | undefined\n    ): Promise<any> {\n        return IndexerApi.call(endpoint, 'GET', action, query, data, headers)\n    }\n\n    static post(\n        endpoint: string,\n        action: string,\n        query?: any,\n        data?: any,\n        headers?: Headers | undefined\n    ): Promise<any> {\n        return IndexerApi.call(endpoint, 'POST', action, query, data, headers)\n    }\n\n    private static call(\n        endpoint: string,\n        method: supportedMethods,\n        action: string,\n        query: any,\n        data: any,\n        headers: Headers | undefined\n    ): Promise<any> {\n        let callHeaders: any = { 'Content-Type': 'application/json;charset=UTF-8' }\n        if (headers) {\n            for (let key of Object.keys(headers)) {\n                callHeaders[key] = headers[key]\n            }\n        }\n\n        const contents: RequestInit = {\n            method: method || 'NO_METHOD_SPECIFIED',\n            headers: callHeaders,\n            cache: 'no-cache',\n        }\n\n        if (data) {\n            contents.body = JSON.stringify(data)\n        }\n\n        if (query) {\n            action = `${action}?${queryString.stringify(query)}`\n        }\n\n        let status: Number\n        return fetch(`${endpoint}/${action}`, contents)\n            .then(response => {\n                status = response.status\n                return response.json()\n            })\n            .then(json => {\n                if (status >= 200 && status < 300) {\n                    return json\n                }\n\n                const error = IndexerApi.identifyError(json)\n                return Promise.reject(error)\n            })\n    }\n\n    private static identifyError(error: any): string {\n        if (!error || !error.error) {\n            return 'Unknown error.'\n        }\n\n        return error.error\n    }\n}\n","import IndexerApi from './api'\n\ninterface IndexerOptions {\n    endpoint: string\n}\n\ninterface TransactionMsg {\n    action: string\n    data: object\n    module: string\n    sender: string\n    meta: any[]\n    addresses: string[]\n    log: string\n}\n\ninterface Transaction {\n    _id: string\n    hash: string\n    height: string\n    msgs: TransactionMsg[]\n    log: string\n    info: string\n    code: string\n    codespace: string\n    gas_wanted: string\n    gas_used: string\n    timestamp: string\n    valid: boolean\n}\n\ninterface Block {\n    height: number\n    hash: string\n    transNum: string\n    time: Date\n    lastBlockHash: string\n    proposerAddress: string\n    precommitsCount: number\n    validatorsCount: number\n}\n\ninterface BlockEvent {\n    height: number\n    action: string\n    data: object\n    addresses: string[]\n    eventType: string\n}\n\ninterface BlockData {\n    block: Block\n    txs: Transaction[]\n    events: BlockEvent[]\n}\n\ninterface TxCount {\n    count: number\n}\n\nexport default class Indexer {\n    private _opts: IndexerOptions\n\n    constructor(opts: IndexerOptions) {\n        this._opts = opts\n    }\n\n    async transactions(query: any = {}): Promise<Transaction[]> {\n        return IndexerApi.get(this._opts.endpoint, 'txs', query)\n    }\n\n    async transaction(hash: string): Promise<Transaction> {\n        return IndexerApi.get(this._opts.endpoint, `tx/${hash}`)\n    }\n\n    async transactionCount(): Promise<TxCount> {\n        return IndexerApi.get(this._opts.endpoint, `txs/count`)\n    }\n\n    async latestBlock(): Promise<BlockData> {\n        return IndexerApi.get(this._opts.endpoint, 'block/latest')\n    }\n\n    async block(height: string): Promise<BlockData> {\n        return IndexerApi.get(this._opts.endpoint, `block/${height}`)\n    }\n\n    async chain(): Promise<any> {\n        return IndexerApi.get(this._opts.endpoint, 'chain/info')\n    }\n\n    async blockEvents(query: any = {}): Promise<BlockEvent[]> {\n        return IndexerApi.get(this._opts.endpoint, 'block_events', query)\n    }\n\n    async blocks(query: any = {}): Promise<Block[]> {\n        return IndexerApi.get(this._opts.endpoint, 'blocks', query)\n    }\n}\n","import Query from './query'\nimport { DefaultSigner, Signer } from './signer'\nimport Broadcast from './transactions/broadcast'\n\nimport * as Types from './common'\n\nimport { ITransport, Transport } from './transport'\n\nimport { ResultBroadcastTx } from './transport/rpc'\n\nimport { Transaction } from './transactions'\nimport { TransactionEvents } from './transactions/events'\n\nimport Bank from './transactions/bank'\nimport Distribution from './transactions/distribution'\nimport Slashing from './transactions/slashing'\nimport Staking from './transactions/staking'\n\nimport Indexer from './indexer'\n\nexport interface Options {\n    nodeUrl: string\n    chainId?: string\n    timeout?: number\n    maxAttempts?: number\n    txConfirmTries?: number\n    txConfirmInterval?: number\n    maxFeeInCoin?: number\n    signer?: Signer\n    indexerEndpoint?: string\n}\n\nexport class Mele {\n    private _options: Options\n    private _transport: ITransport\n    private _query: Query\n    private _broadcast: Broadcast\n    private _signer: Signer\n    private _chainId: string\n    private _maxFeeInCoin: number\n    private _indexer: Indexer\n\n    private _bank: Bank\n    private _staking: Staking\n    private _slashing: Slashing\n    private _distribution: Distribution\n\n    constructor(opt: Options) {\n        this._options = opt\n\n        this._transport = new Transport({\n            nodeUrl: this._options.nodeUrl,\n        })\n        this._query = new Query(this._transport)\n\n        this._signer = opt.signer || new DefaultSigner()\n\n        this._chainId = opt.chainId || 'test'\n        this._maxFeeInCoin = opt.maxFeeInCoin || 0\n\n        this._broadcast = new Broadcast(this._transport, this._query, this._signer, {\n            txConfirmInterval: this._options.txConfirmInterval || 6000,\n            txConfirmTries: this._options.txConfirmTries || 6,\n            chainId: this._chainId,\n            maxFeeInCoin: this._maxFeeInCoin,\n        })\n\n        this._indexer = new Indexer({\n            endpoint: opt.indexerEndpoint || 'http://localhost:3100/api/v1',\n        })\n\n        this._bank = new Bank(this._broadcast)\n        this._staking = new Staking(this._broadcast)\n        this._slashing = new Slashing(this._broadcast)\n        this._distribution = new Distribution(this._broadcast)\n    }\n\n    get query(): Query {\n        return this._query\n    }\n\n    get signer(): Signer {\n        return this._signer\n    }\n\n    get bank(): Bank {\n        return this._bank\n    }\n\n    get staking(): Staking {\n        return this._staking\n    }\n\n    get slashing(): Slashing {\n        return this._slashing\n    }\n\n    get distribution(): Distribution {\n        return this._distribution\n    }\n\n    get indexer(): Indexer {\n        return this._indexer\n    }\n}\n"],"names":["Keys","ec","EC","bip39.generateMnemonic","bip39.validateMnemonic","bip39.mnemonicToSeedSync","bip32.fromSeed","Utils.getPublicKeyFromPrivateKey","Utils.getAddressFromPublicKey","Utils.deriveMasterKey","Utils.deriveKeyPair","Codec","_types","Msgs"],"mappings":"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"}