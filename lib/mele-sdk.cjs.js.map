{"version":3,"file":"mele-sdk.cjs.js","sources":["../src/utils/index.ts"],"sourcesContent":["import { ec as EC } from 'elliptic'\n\nimport * as bip32 from 'bip32'\nimport * as bip39 from 'bip39'\n\nimport bech32 from 'bech32'\nimport ripemd160 from 'ripemd160'\nimport shajs from 'sha.js'\n\nconst ec = new EC('secp256k1')\n\nexport interface KeyPair {\n    privateKey: string\n    publicKey: string\n}\n\nexport function generateMnemonic(): string {\n    return bip39.generateMnemonic(256)\n}\n\nexport function generateKeyPair(): KeyPair {\n    const keyPair = ec.genKeyPair()\n\n    const pubKey = keyPair.getPublic(true, 'hex')\n    const privKey = keyPair.getPrivate('hex')\n\n    return <KeyPair>{\n        privateKey: privKey,\n        publicKey: pubKey,\n    }\n}\n\nexport function deriveMasterKey(mnemonic: string): bip32.BIP32Interface {\n    bip39.validateMnemonic(mnemonic)\n\n    const seed = bip39.mnemonicToSeedSync(mnemonic)\n\n    return bip32.fromSeed(seed)\n}\n\nexport function deriveMasterKeyFromSeed(seed: Buffer): bip32.BIP32Interface {\n    return bip32.fromSeed(seed)\n}\n\nexport function deriveKeyPair(masterKey: bip32.BIP32Interface, hdPath: string): KeyPair {\n    const hdWallet = masterKey.derivePath(hdPath)\n\n    const privKey = hdWallet.privateKey\n\n    if (!privKey) {\n        throw new Error('Failed to derive key pair!')\n    }\n\n    const pubKey = ec.keyFromPrivate(privKey, 'hex')\n\n    return <KeyPair>{\n        privateKey: privKey.toString('hex'),\n        publicKey: pubKey.getPublic(true, 'hex'),\n    }\n}\n\nexport function deriveKeyPairFromAccountAndIndex(\n    masterKey: bip32.BIP32Interface,\n    account: number = 0,\n    index: number = 0\n): KeyPair {\n    const hdPath = `m/44'/118'/${account}'/0/${index}`\n\n    return deriveKeyPair(masterKey, hdPath)\n}\n\nexport function getAddressFromPublicKey(pubKey: string): string {\n    if (!validatePublicKey(pubKey)) {\n        throw new Error('Invalid public key.')\n    }\n\n    const hashResult = shajs('sha256')\n        .update(Buffer.from(pubKey, 'hex'))\n        .digest() as string\n\n    const addr = new ripemd160().update(hashResult).digest()\n\n    return encodeAddr(addr)\n}\n\nexport function getPublicKeyFromPrivateKey(privKey: string): string {\n    const key = ec.keyFromPrivate(privKey, 'hex')\n\n    return key.getPublic(true, 'hex')\n}\n\nexport function validatePublicKey(pubKey: string): boolean {\n    try {\n        const keyPair = ec.keyFromPublic(pubKey, 'hex')\n\n        return keyPair.validate().result\n    } catch (e) {\n        return false\n    }\n}\n\nexport function encodeAddr(addr: Buffer): string {\n    return bech32.encode(_PREFIX.PrefixAddress, bech32.toWords(addr))\n}\n\nexport const _PREFIX = {\n    PrefixAddress: 'mele'\n}"],"names":["EC","bip39.generateMnemonic","bip39.validateMnemonic","bip39.mnemonicToSeedSync","bip32.fromSeed"],"mappings":";;;;;;;;;;;;;AASA,MAAM,EAAE,GAAG,IAAIA,WAAE,CAAC,WAAW,CAAC,CAAA;AAO9B;IACI,OAAOC,sBAAsB,CAAC,GAAG,CAAC,CAAA;CACrC;AAED;IACI,MAAM,OAAO,GAAG,EAAE,CAAC,UAAU,EAAE,CAAA;IAE/B,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;IAC7C,MAAM,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;IAEzC,OAAgB;QACZ,UAAU,EAAE,OAAO;QACnB,SAAS,EAAE,MAAM;KACpB,CAAA;CACJ;AAED,yBAAgC,QAAgB;IAC5CC,sBAAsB,CAAC,QAAQ,CAAC,CAAA;IAEhC,MAAM,IAAI,GAAGC,wBAAwB,CAAC,QAAQ,CAAC,CAAA;IAE/C,OAAOC,cAAc,CAAC,IAAI,CAAC,CAAA;CAC9B;AAED,iCAAwC,IAAY;IAChD,OAAOA,cAAc,CAAC,IAAI,CAAC,CAAA;CAC9B;AAED,uBAA8B,SAA+B,EAAE,MAAc;IACzE,MAAM,QAAQ,GAAG,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,CAAA;IAE7C,MAAM,OAAO,GAAG,QAAQ,CAAC,UAAU,CAAA;IAEnC,IAAI,CAAC,OAAO,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAA;KAChD;IAED,MAAM,MAAM,GAAG,EAAE,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;IAEhD,OAAgB;QACZ,UAAU,EAAE,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC;QACnC,SAAS,EAAE,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC;KAC3C,CAAA;CACJ;AAED,0CACI,SAA+B,EAC/B,UAAkB,CAAC,EACnB,QAAgB,CAAC;IAEjB,MAAM,MAAM,GAAG,cAAc,OAAO,OAAO,KAAK,EAAE,CAAA;IAElD,OAAO,aAAa,CAAC,SAAS,EAAE,MAAM,CAAC,CAAA;CAC1C;AAED,iCAAwC,MAAc;IAClD,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE;QAC5B,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAA;KACzC;IAED,MAAM,UAAU,GAAG,KAAK,CAAC,QAAQ,CAAC;SAC7B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;SAClC,MAAM,EAAY,CAAA;IAEvB,MAAM,IAAI,GAAG,IAAI,SAAS,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,MAAM,EAAE,CAAA;IAExD,OAAO,UAAU,CAAC,IAAI,CAAC,CAAA;CAC1B;AAED,oCAA2C,OAAe;IACtD,MAAM,GAAG,GAAG,EAAE,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;IAE7C,OAAO,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;CACpC;AAED,2BAAkC,MAAc;IAC5C,IAAI;QACA,MAAM,OAAO,GAAG,EAAE,CAAC,aAAa,CAAC,MAAM,EAAE,KAAK,CAAC,CAAA;QAE/C,OAAO,OAAO,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAA;KACnC;IAAC,OAAO,CAAC,EAAE;QACR,OAAO,KAAK,CAAA;KACf;CACJ;AAED,oBAA2B,IAAY;IACnC,OAAO,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAA;CACpE;AAED,AAAO,MAAM,OAAO,GAAG;IACnB,aAAa,EAAE,MAAM;CACxB,CAAA;;;;;;;;;;;;;;;;;;"}