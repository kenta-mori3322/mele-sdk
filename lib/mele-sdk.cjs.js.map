{"version":3,"file":"mele-sdk.cjs.js","sources":["../src/utils/index.ts","../src/query/index.ts","../src/transport/jsonrpc2.ts","../src/transport/rpc.ts","../src/transport/index.ts","../src/mele.ts"],"sourcesContent":["import { ec as EC } from 'elliptic'\n\nimport * as bip32 from 'bip32'\nimport * as bip39 from 'bip39'\n\nimport bech32 from 'bech32'\nimport ripemd160 from 'ripemd160'\nimport shajs from 'sha.js'\n\nconst ec = new EC('secp256k1')\n\nexport interface KeyPair {\n    privateKey: string\n    publicKey: string\n}\n\nexport function generateMnemonic(): string {\n    return bip39.generateMnemonic(256)\n}\n\nexport function generateKeyPair(): KeyPair {\n    const keyPair = ec.genKeyPair()\n\n    const pubKey = keyPair.getPublic(true, 'hex')\n    const privKey = keyPair.getPrivate('hex')\n\n    return <KeyPair>{\n        privateKey: privKey,\n        publicKey: pubKey,\n    }\n}\n\nexport function deriveMasterKey(mnemonic: string): bip32.BIP32Interface {\n    bip39.validateMnemonic(mnemonic)\n\n    const seed = bip39.mnemonicToSeedSync(mnemonic)\n\n    return bip32.fromSeed(seed)\n}\n\nexport function deriveMasterKeyFromSeed(seed: Buffer): bip32.BIP32Interface {\n    return bip32.fromSeed(seed)\n}\n\nexport function deriveKeyPair(masterKey: bip32.BIP32Interface, hdPath: string): KeyPair {\n    const hdWallet = masterKey.derivePath(hdPath)\n\n    const privKey = hdWallet.privateKey\n\n    if (!privKey) {\n        throw new Error('Failed to derive key pair!')\n    }\n\n    const pubKey = ec.keyFromPrivate(privKey, 'hex')\n\n    return <KeyPair>{\n        privateKey: privKey.toString('hex'),\n        publicKey: pubKey.getPublic(true, 'hex'),\n    }\n}\n\nexport function deriveKeyPairFromAccountAndIndex(\n    masterKey: bip32.BIP32Interface,\n    account: number = 0,\n    index: number = 0\n): KeyPair {\n    const hdPath = `m/44'/118'/${account}'/0/${index}`\n\n    return deriveKeyPair(masterKey, hdPath)\n}\n\nexport function getAddressFromPublicKey(pubKey: string): string {\n    if (!validatePublicKey(pubKey)) {\n        throw new Error('Invalid public key.')\n    }\n\n    const hashResult = shajs('sha256')\n        .update(Buffer.from(pubKey, 'hex'))\n        .digest() as string\n\n    const addr = new ripemd160().update(hashResult).digest()\n\n    return encodeAddr(addr)\n}\n\nexport function getPublicKeyFromPrivateKey(privKey: string): string {\n    const key = ec.keyFromPrivate(privKey, 'hex')\n\n    return key.getPublic(true, 'hex')\n}\n\nexport function validatePublicKey(pubKey: string): boolean {\n    try {\n        const keyPair = ec.keyFromPublic(pubKey, 'hex')\n\n        return keyPair.validate().result\n    } catch (e) {\n        return false\n    }\n}\n\nexport function encodeAddr(addr: Buffer): string {\n    return bech32.encode(_PREFIX.PrefixAddress, bech32.toWords(addr))\n}\n\nexport const _PREFIX = {\n    PrefixAddress: 'mele'\n}","import { ITransport } from '../transport'\nimport { ResultBlock, ResultStatus } from '../transport/rpc'\n\nexport default class Query {\n    private _transport: ITransport\n\n    constructor(transport: ITransport) {\n        this._transport = transport\n    }\n\n    getBlock(height: number): Promise<ResultBlock> {\n        return this._transport.block(height)\n    }\n\n    getStatus(): Promise<ResultStatus> {\n        return this._transport.status()\n    }\n\n}","/** A String specifying the version of the JSON-RPC protocol. MUST be exactly \"2.0\". */\nexport type JsonRpcVersion = '2.0'\n\n/** Method names that begin with the word rpc followed by a period character\n * (U+002E or ASCII 46) are reserved for rpc-internal methods and extensions\n *  and MUST NOT be used for anything else. */\nexport type JsonRpcReservedMethod = string\n\n/** An identifier established by the Client that MUST contain a String, Number,\n *  or NULL value if included. If it is not included it is assumed to be a\n *  notification. The value SHOULD normally not be Null and Numbers SHOULD\n *  NOT contain fractional parts [2] */\nexport type JsonRpcId = number | string | void\n\n/**\n * method:\n * A String containing the name of the method to be invoked.\n * Method names that begin with the word rpc followed by a period\n * character (U+002E or ASCII 46) are reserved for rpc-internal methods\n * and extensions and MUST NOT be used for anything else.\n *\n * params:\n * A Structured value that holds the parameter values to be used\n * during the invocation of the method. This member MAY be omitted.\n */\nexport interface JsonRpcNotification<T> {\n    jsonrpc: JsonRpcVersion\n    method: string\n    params?: T\n}\n\nexport interface JsonRpcRequest<T> extends JsonRpcNotification<T> {\n    id: JsonRpcId\n}\n\nexport interface JsonRpcResponseBase {\n    jsonrpc: JsonRpcVersion\n    id: JsonRpcId\n}\n\nexport interface JsonRpcSuccess<T = object> extends JsonRpcResponseBase {\n    result: T\n}\nexport function isJsonRpcSuccess(response: object): response is JsonRpcSuccess {\n    return 'result' in response\n}\n\nexport interface JsonRpcFailure<T> extends JsonRpcResponseBase {\n    error: JsonRpcError<T>\n}\n\nexport interface JsonRpcError<T = object> {\n    /** Must be an integer */\n    code: number\n    message: string\n    data?: T\n}\n\nexport type JsonRpcResponse<T> = JsonRpcSuccess<T> | JsonRpcFailure<T>\n\n//\n// PRE-DEFINED ERROR CODES\n//\n//\n/** An error occurred on the server while parsing the JSON text. */\nexport const PARSE_ERROR = -32700\n/** The JSON sent is not a valid Request object. */\nexport const INVALID_REQUEST = -32600\n/** The method does not exist / is not available. */\nexport const METHOD_NOT_FOUND = -32601\n/** Invalid method parameter(s). */\nexport const INVALID_PARAMS = -32602\n/** Internal JSON-RPC error. */\nexport const INTERNAL_ERROR = -32603","import fetch from 'cross-fetch'\nimport { JsonRpcResponse, isJsonRpcSuccess } from './jsonrpc2'\n\n\nexport interface ResultBlock {\n    block: Block\n    block_meta: BlockMeta\n}\n\nexport interface Block {\n    data: Data\n}\n\nexport interface BlockMeta {}\n\nexport interface Data {\n    txs: string[]\n}\n\nexport interface ResultStatus {\n    node_info: NodeInfo\n    sync_info: SyncInfo\n}\n\nexport interface NodeInfo {\n    channels: string\n    id: string\n    listen_addr: string\n    moniker: string\n    network: string\n    version: string\n}\n\nexport interface SyncInfo {\n    catching_up: boolean\n    latest_app_hash: string\n    latest_block_hash: string\n    latest_block_height: string\n    latest_block_time: string\n}\n\nexport class Rpc {\n    private _nodeUrl: string\n\n    constructor(nodeUrl: string) {\n        this._nodeUrl = nodeUrl\n    }\n\n    block(height: number): Promise<ResultBlock> {\n        return fetch(this._nodeUrl, {\n            headers: { 'Content-Type': 'text/json' },\n            body: JSON.stringify({\n                jsonrpc: '2.0',\n                id: 'jsonrpc-client',\n                method: 'block',\n                params: {\n                    height: String(height),\n                },\n            }),\n            method: 'POST',\n            mode: 'cors',\n        })\n            .then(response => response.json())\n            .then((data: JsonRpcResponse<ResultBlock>) => {\n                if (isJsonRpcSuccess(data)) {\n                    return data.result as ResultBlock\n                } else {\n                    throw data.error\n                }\n            })\n    }\n\n    status(): Promise<ResultStatus> {\n        return fetch(this._nodeUrl, {\n            headers: { 'Content-Type': 'text/json' },\n            body: JSON.stringify({\n                jsonrpc: '2.0',\n                id: 'jsonrpc-client',\n                method: 'status',\n            }),\n            method: 'POST',\n            mode: 'cors',\n        })\n            .then(response => response.json())\n            .then((data: JsonRpcResponse<ResultStatus>) => {\n                if (isJsonRpcSuccess(data)) {\n                    return data.result as ResultStatus\n                } else {\n                    throw data.error\n                }\n            })\n    }\n\n}","import { ec as EC } from 'elliptic'\n\nimport {\n    ResultBlock,\n    ResultStatus,\n    Rpc\n} from './rpc'\n\nexport interface ITransport {\n    block(height: number): Promise<ResultBlock>\n    status(): Promise<ResultStatus>\n}\n\nexport interface ITransportOptions {\n    nodeUrl: string\n    chainId?: string\n    timeout?: number\n    maxAttempts?: number\n    txConfirmInterval?: number\n    txConfirmMaxAttempts?: number\n}\n\nexport class Transport implements ITransport {\n    private _rpc: Rpc\n\n    constructor(opt: ITransportOptions) {\n        this._rpc = new Rpc(opt.nodeUrl)\n    }\n\n    block(height: number): Promise<ResultBlock> {\n        return this._rpc.block(height).then(result => {\n            return result as ResultBlock\n        })\n    }\n\n    status(): Promise<ResultStatus> {\n        return this._rpc.status().then(result => {\n            return result as ResultStatus\n        })\n    }\n}","import Query from './query'\n\nimport {\n    ITransport,\n    ITransportOptions,\n    Transport,\n} from './transport'\n\nexport class Mele {\n    private _options: ITransportOptions\n    private _transport: ITransport\n    private _query: Query\n\n    constructor(opt: ITransportOptions) {\n        this._options = opt\n        this._transport = new Transport(opt)\n        this._query = new Query(this._transport)\n    }\n\n    get query(): Query {\n        return this._query\n    }\n}"],"names":["EC","bip39.generateMnemonic","bip39.validateMnemonic","bip39.mnemonicToSeedSync","bip32.fromSeed"],"mappings":"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"}